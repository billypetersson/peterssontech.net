name: 🚀 Deploy Hugo Portfolio to GitHub Pages

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:
    inputs:
      hugo_version:
        description: 'Hugo version to use'
        required: false
        default: '0.147.9'
        type: string

permissions:
  contents: read
  pages: write
  id-token: write
  pull-requests: write

concurrency:
  group: "pages-${{ github.ref }}"
  cancel-in-progress: false

defaults:
  run:
    shell: bash

env:
  HUGO_VERSION: ${{ inputs.hugo_version || '0.147.9' }}
  NODE_VERSION: '18'

jobs:
  # Job 1: Build and validate the Hugo site
  build:
    name: 🏗️ Build Hugo Site
    runs-on: ubuntu-latest
    outputs:
      pages-url: ${{ steps.pages.outputs.base_url }}
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0  # Fetch full history for GitInfo

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
        if: hashFiles('package-lock.json') != ''

      - name: 📦 Install Node.js dependencies
        run: |
          if [[ -f package-lock.json || -f npm-shrinkwrap.json ]]; then
            npm ci
          else
            echo "No Node.js dependencies found, skipping..."
          fi

      - name: 🏗️ Install Hugo CLI
        run: |
          echo "Installing Hugo v${{ env.HUGO_VERSION }}..."
          wget -q -O ${{ runner.temp }}/hugo.deb \
            https://github.com/gohugoio/hugo/releases/download/v${{ env.HUGO_VERSION }}/hugo_extended_${{ env.HUGO_VERSION }}_linux-amd64.deb
          sudo dpkg -i ${{ runner.temp }}/hugo.deb

      - name: 🎨 Install Dart Sass
        run: |
          echo "Installing Dart Sass..."
          sudo snap install dart-sass
          dart-sass --version

      - name: ✅ Verify Hugo installation
        run: |
          hugo version
          hugo env

      - name: 🔍 Setup GitHub Pages
        id: pages
        uses: actions/configure-pages@v4

      - name: 🧹 Clean previous builds
        run: |
          if [ -d "public" ]; then
            rm -rf public
            echo "Cleaned previous build directory"
          fi

      - name: 🔍 Validate content
        run: |
          echo "Validating Hugo content..."
          
          # Run content validation with error handling
          echo "Checking for draft content..."
          hugo list drafts || echo "No drafts found or command failed"
          
          echo "Checking for expired content..."
          hugo list expired || echo "No expired content found or command failed"
          
          echo "Checking for future content..."
          hugo list future || echo "No future content found or command failed"
          
          echo "Content validation completed"

      - name: 🏗️ Build with Hugo
        env:
          HUGO_ENVIRONMENT: production
          HUGO_ENV: production
          TZ: UTC
        run: |
          echo "Building Hugo site for production..."
          
          # Check if this is a git repository
          if git rev-parse --git-dir > /dev/null 2>&1; then
            echo "Git repository detected, enabling GitInfo..."
            hugo \
              --minify \
              --gc \
              --enableGitInfo \
              --baseURL "${{ steps.pages.outputs.base_url }}/" \
              --logLevel info
          else
            echo "No git repository detected, building without GitInfo..."
            hugo \
              --minify \
              --gc \
              --baseURL "${{ steps.pages.outputs.base_url }}/" \
              --logLevel info
          fi

      - name: 📊 Generate build report
        run: |
          echo "Generating build report..."
          
          if [ ! -d "public" ]; then
            echo "❌ Build failed - no public directory found" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
          # Generate comprehensive build report
          PAGES_COUNT=$(find public -name "*.html" 2>/dev/null | wc -l)
          TOTAL_FILES=$(find public -type f 2>/dev/null | wc -l)
          BUILD_SIZE=$(du -sh public 2>/dev/null | cut -f1 || echo "Unknown")
          
          echo "## 📊 Build Report" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Hugo Version | ${{ env.HUGO_VERSION }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build Time | $(date -u) |" >> $GITHUB_STEP_SUMMARY
          echo "| Pages Generated | $PAGES_COUNT |" >> $GITHUB_STEP_SUMMARY
          echo "| Total Files | $TOTAL_FILES |" >> $GITHUB_STEP_SUMMARY
          echo "| Build Size | $BUILD_SIZE |" >> $GITHUB_STEP_SUMMARY
          
          # List key files if they exist
          if [ -d "public" ] && [ "$(ls -A public 2>/dev/null)" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 📁 Key Generated Files" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            ls -la public/ 2>/dev/null | head -10 >> $GITHUB_STEP_SUMMARY || echo "Unable to list files" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "Build report generated successfully"

      - name: 🔍 Validate generated site
        run: |
          echo "Validating generated site..."
          
          # Check if public directory exists
          if [ ! -d "public" ]; then
            echo "❌ Public directory not found!"
            exit 1
          fi
          
          # Check if essential files exist
          essential_files=("index.html" "sitemap.xml" "robots.txt" "index.json")
          missing_files=()
          
          for file in "${essential_files[@]}"; do
            if [ -f "public/$file" ]; then
              echo "✅ $file exists"
            else
              echo "❌ $file is missing"
              missing_files+=("$file")
            fi
          done
          
          # Only fail if critical files are missing
          critical_files=("index.html")
          for file in "${critical_files[@]}"; do
            if [[ " ${missing_files[@]} " =~ " ${file} " ]]; then
              echo "💥 Critical file $file is missing! Build failed."
              exit 1
            fi
          done
          
          # Warn about non-critical missing files
          if [ ${#missing_files[@]} -gt 0 ]; then
            echo "⚠️ Some non-critical files are missing: ${missing_files[*]}"
            echo "This might be expected for this build configuration."
          fi
          
          # Check for broken internal links (basic check)
          echo "Checking for common issues..."
          if grep -r "localhost:1313" public/ 2>/dev/null; then
            echo "⚠️ Warning: Found localhost references in generated site"
          else
            echo "✅ No localhost references found"
          fi
          
          # Check basic site structure
          html_files=$(find public -name "*.html" | wc -l)
          echo "📄 HTML files generated: $html_files"
          
          if [ $html_files -eq 0 ]; then
            echo "❌ No HTML files generated!"
            exit 1
          fi
          
          echo "✅ Site validation completed successfully"

      - name: 🗜️ Compress assets (optional optimization)
        run: |
          echo "Optimizing assets..."
          
          # Compress CSS and JS files that aren't already minified
          find public -name "*.css" -not -name "*.min.css" -exec gzip -k {} \;
          find public -name "*.js" -not -name "*.min.js" -exec gzip -k {} \;
          
          echo "Asset optimization completed"

      - name: 📤 Upload site artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public
          name: github-pages
          retention-days: 7

      - name: 📤 Upload build logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: build-logs-${{ github.run_number }}
          path: |
            .hugo_build.lock
            resources/
          retention-days: 7

  # Job 2: Deploy to GitHub Pages (only on main branch)
  deploy:
    name: 🚀 Deploy to GitHub Pages
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: 🚀 Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        with:
          artifact_name: github-pages

      - name: 📝 Update deployment status
        run: |
          echo "## 🚀 Deployment Successful!" >> $GITHUB_STEP_SUMMARY
          echo "| Info | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🌐 **Live Site** | [${{ steps.deployment.outputs.page_url }}](${{ steps.deployment.outputs.page_url }}) |" >> $GITHUB_STEP_SUMMARY
          echo "| 📅 **Deployed At** | $(date -u) |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔗 **Commit** | [\`${GITHUB_SHA:0:7}\`](https://github.com/${{ github.repository }}/commit/${{ github.sha }}) |" >> $GITHUB_STEP_SUMMARY
          echo "| 👤 **Deployed By** | @${{ github.actor }} |" >> $GITHUB_STEP_SUMMARY

  # Job 3: Run lighthouse audit (only on main branch)
  lighthouse-audit:
    name: 🔍 Lighthouse Audit
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔍 Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v11
        with:
          urls: |
            ${{ needs.build.outputs.pages-url || 'https://peterssontech.net' }}
            ${{ needs.build.outputs.pages-url || 'https://peterssontech.net' }}/about/
            ${{ needs.build.outputs.pages-url || 'https://peterssontech.net' }}/projects/
          uploadArtifacts: true
          temporaryPublicStorage: true

  # Job 4: Comment on PR with preview (only for pull requests)
  pr-comment:
    name: 💬 PR Preview Comment
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: 💬 Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('🔍 Preview Build')
            );
            
            const commentBody = `
            ## 🔍 Preview Build Complete!
            
            ✅ **Build Status**: Successful
            📊 **Pages Generated**: Built successfully
            🕒 **Build Time**: ${new Date().toUTCString()}
            
            ### 📋 Build Summary
            - Hugo version: ${{ env.HUGO_VERSION }}
            - Commit: \`${context.sha.substring(0, 7)}\`
            - Branch: \`${context.ref.replace('refs/heads/', '')}\`
            
            > **Note**: This is a preview build for testing. The site will be deployed to GitHub Pages only when merged to main.
            
            ### 🛠️ Next Steps
            - Review the changes in this PR
            - Test any new functionality
            - Merge to main to deploy to production
            `;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }