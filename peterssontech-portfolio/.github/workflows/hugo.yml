name: üöÄ Deploy Hugo Portfolio to GitHub Pages

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:
    inputs:
      hugo_version:
        description: 'Hugo version to use'
        required: false
        default: '0.147.9'
        type: string

permissions:
  contents: read
  pages: write
  id-token: write
  pull-requests: write

concurrency:
  group: "pages-${{ github.ref }}"
  cancel-in-progress: false

defaults:
  run:
    shell: bash

env:
  HUGO_VERSION: ${{ inputs.hugo_version || '0.147.9' }}
  NODE_VERSION: '18'

jobs:
  # Job 1: Build and validate the Hugo site
  build:
    name: üèóÔ∏è Build Hugo Site
    runs-on: ubuntu-latest
    outputs:
      pages-url: ${{ steps.pages.outputs.base_url }}
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0  # Fetch full history for GitInfo

      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
        if: hashFiles('package-lock.json') != ''

      - name: üì¶ Install Node.js dependencies
        run: |
          if [[ -f package-lock.json || -f npm-shrinkwrap.json ]]; then
            npm ci
          else
            echo "No Node.js dependencies found, skipping..."
          fi

      - name: üèóÔ∏è Install Hugo CLI
        run: |
          echo "Installing Hugo v${{ env.HUGO_VERSION }}..."
          wget -q -O ${{ runner.temp }}/hugo.deb \
            https://github.com/gohugoio/hugo/releases/download/v${{ env.HUGO_VERSION }}/hugo_extended_${{ env.HUGO_VERSION }}_linux-amd64.deb
          sudo dpkg -i ${{ runner.temp }}/hugo.deb

      - name: üé® Install Dart Sass
        run: |
          echo "Installing Dart Sass..."
          sudo snap install dart-sass
          dart-sass --version

      - name: ‚úÖ Verify Hugo installation
        run: |
          hugo version
          hugo env

      - name: üîç Setup GitHub Pages
        id: pages
        uses: actions/configure-pages@v4

      - name: üßπ Clean previous builds
        run: |
          if [ -d "public" ]; then
            rm -rf public
            echo "Cleaned previous build directory"
          fi

      - name: üîç Validate content
        run: |
          echo "Validating Hugo content..."
          hugo list drafts
          hugo list expired
          hugo list future

      - name: üèóÔ∏è Build with Hugo
        env:
          HUGO_ENVIRONMENT: production
          HUGO_ENV: production
          TZ: UTC
        run: |
          echo "Building Hugo site for production..."
          hugo \
            --minify \
            --gc \
            --enableGitInfo \
            --baseURL "${{ steps.pages.outputs.base_url }}/" \
            --verbose

      - name: üìä Generate build report
        run: |
          echo "## üìä Build Report" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Hugo Version | ${{ env.HUGO_VERSION }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build Time | $(date -u) |" >> $GITHUB_STEP_SUMMARY
          echo "| Pages Generated | $(find public -name "*.html" | wc -l) |" >> $GITHUB_STEP_SUMMARY
          echo "| Total Files | $(find public -type f | wc -l) |" >> $GITHUB_STEP_SUMMARY
          echo "| Build Size | $(du -sh public | cut -f1) |" >> $GITHUB_STEP_SUMMARY
          
          # List some key files
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìÅ Key Generated Files" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          ls -la public/ | head -10 >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

      - name: üîç Validate generated site
        run: |
          echo "Validating generated site..."
          
          # Check if essential files exist
          essential_files=("index.html" "sitemap.xml" "robots.txt" "index.json")
          for file in "${essential_files[@]}"; do
            if [ -f "public/$file" ]; then
              echo "‚úÖ $file exists"
            else
              echo "‚ùå $file is missing"
              exit 1
            fi
          done
          
          # Check for broken internal links (basic check)
          echo "Checking for common issues..."
          if grep -r "localhost:1313" public/; then
            echo "‚ö†Ô∏è Warning: Found localhost references in generated site"
          fi

      - name: üóúÔ∏è Compress assets (optional optimization)
        run: |
          echo "Optimizing assets..."
          
          # Compress CSS and JS files that aren't already minified
          find public -name "*.css" -not -name "*.min.css" -exec gzip -k {} \;
          find public -name "*.js" -not -name "*.min.js" -exec gzip -k {} \;
          
          echo "Asset optimization completed"

      - name: üì§ Upload site artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public
          name: github-pages
          retention-days: 7

      - name: üì§ Upload build logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: build-logs-${{ github.run_number }}
          path: |
            .hugo_build.lock
            resources/
          retention-days: 7

  # Job 2: Deploy to GitHub Pages (only on main branch)
  deploy:
    name: üöÄ Deploy to GitHub Pages
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: üöÄ Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        with:
          artifact_name: github-pages

      - name: üìù Update deployment status
        run: |
          echo "## üöÄ Deployment Successful!" >> $GITHUB_STEP_SUMMARY
          echo "| Info | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| üåê **Live Site** | [${{ steps.deployment.outputs.page_url }}](${{ steps.deployment.outputs.page_url }}) |" >> $GITHUB_STEP_SUMMARY
          echo "| üìÖ **Deployed At** | $(date -u) |" >> $GITHUB_STEP_SUMMARY
          echo "| üîó **Commit** | [\`${GITHUB_SHA:0:7}\`](https://github.com/${{ github.repository }}/commit/${{ github.sha }}) |" >> $GITHUB_STEP_SUMMARY
          echo "| üë§ **Deployed By** | @${{ github.actor }} |" >> $GITHUB_STEP_SUMMARY

  # Job 3: Run lighthouse audit (only on main branch)
  lighthouse-audit:
    name: üîç Lighthouse Audit
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üîç Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v11
        with:
          urls: |
            ${{ needs.deploy.outputs.page-url || 'https://peterssontech.net' }}
            ${{ needs.deploy.outputs.page-url || 'https://peterssontech.net' }}/about/
            ${{ needs.deploy.outputs.page-url || 'https://peterssontech.net' }}/projects/
          uploadArtifacts: true
          temporaryPublicStorage: true

  # Job 4: Comment on PR with preview (only for pull requests)
  pr-comment:
    name: üí¨ PR Preview Comment
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: üí¨ Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('üîç Preview Build')
            );
            
            const commentBody = `
            ## üîç Preview Build Complete!
            
            ‚úÖ **Build Status**: Successful
            üìä **Pages Generated**: Built successfully
            üïí **Build Time**: ${new Date().toUTCString()}
            
            ### üìã Build Summary
            - Hugo version: ${{ env.HUGO_VERSION }}
            - Commit: \`${context.sha.substring(0, 7)}\`
            - Branch: \`${context.ref.replace('refs/heads/', '')}\`
            
            > **Note**: This is a preview build for testing. The site will be deployed to GitHub Pages only when merged to main.
            
            ### üõ†Ô∏è Next Steps
            - Review the changes in this PR
            - Test any new functionality
            - Merge to main to deploy to production
            `;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }